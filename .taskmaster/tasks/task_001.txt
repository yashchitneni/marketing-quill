# Task ID: 1
# Title: Project Setup and Authentication Implementation
# Status: pending
# Dependencies: None
# Priority: high
# Description: Set up the Next.js 15 project with TypeScript, Tailwind CSS, and shadcn/ui. Implement authentication using Supabase Auth with magic-link and Google OAuth support.
# Details:
1. Initialize Next.js 15 project with TypeScript
2. Configure Tailwind CSS and shadcn/ui components
3. Set up Supabase client
4. Implement magic-link authentication flow
5. Implement Google OAuth authentication
6. Create Owner/Editor role definitions in Supabase
7. Set up authentication context provider with Zustand
8. Implement protected routes
9. Create sign-out functionality

Code structure:
```typescript
// auth-provider.ts
import { create } from 'zustand';
import { supabase } from '@/lib/supabase';

interface AuthState {
  user: User | null;
  role: 'owner' | 'editor' | null;
  isLoading: boolean;
  signIn: (email: string) => Promise<void>;
  signInWithGoogle: () => Promise<void>;
  signOut: () => Promise<void>;
}

export const useAuthStore = create<AuthState>((set) => ({
  // Implementation details
}));
```

# Test Strategy:
1. Unit tests for auth store functions
2. Integration tests for authentication flows
3. E2E test for sign-up, login, and role verification
4. Test magic-link functionality with test email accounts
5. Test Google OAuth with test accounts
6. Verify proper role assignment and permissions

# Subtasks:
## 1. Initialize Next.js Project with TypeScript and UI Libraries [pending]
### Dependencies: None
### Description: Set up a new Next.js 15 project with TypeScript configuration and install necessary UI libraries.
### Details:
Create a new Next.js project using 'create-next-app' with TypeScript template. Configure tsconfig.json for strict type checking. Install and set up UI libraries (Tailwind CSS, shadcn/ui). Set up project folder structure following best practices. Initialize Git repository and create initial commit.

## 2. Configure Supabase Client and Environment [pending]
### Dependencies: 1.1
### Description: Set up Supabase client configuration and environment variables for the project.
### Details:
Create a Supabase project in the dashboard. Set up environment variables (.env.local) for Supabase URL and API keys. Create a utils/supabase.ts file to initialize the Supabase client. Configure types for Supabase database schema using generated types. Test the connection to ensure proper configuration.

## 3. Implement Authentication Flows [pending]
### Dependencies: 1.2
### Description: Develop authentication flows for magic-link email login and Google OAuth.
### Details:
Create authentication API routes for sign-in and sign-up. Implement magic-link email authentication flow with email templates. Set up Google OAuth provider in Supabase dashboard and implement the OAuth flow in the application. Create sign-in, sign-up, and sign-out UI components. Add form validation for authentication inputs.

## 4. Implement Role Management and Protected Routes [pending]
### Dependencies: 1.3
### Description: Set up role-based access control and protected routes in the application.
### Details:
Define user roles in Supabase (admin, user, etc.). Create middleware for route protection based on authentication status and user roles. Implement higher-order components or hooks for role-based UI rendering. Set up redirect logic for unauthenticated or unauthorized access attempts. Test different user roles and access patterns.

## 5. Create Authentication State Management with Zustand [pending]
### Dependencies: 1.3, 1.4
### Description: Implement global authentication state management using Zustand.
### Details:
Create a Zustand store for authentication state. Implement actions for login, logout, and session management. Add persistence for auth state across page refreshes. Connect authentication state to protected routes and UI components. Implement loading states and error handling for authentication processes.

