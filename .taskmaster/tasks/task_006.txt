# Task ID: 6
# Title: Subject-Line Optimizer Implementation
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Create the Subject-Line Optimizer modal with A/B variants and open-rate gauge. Implement functionality to generate subject line alternatives with predicted open-rate scores.
# Details:
1. Design Subject-Line Optimizer modal with two-column variant list
2. Implement open-rate gauge meter visualization
3. Create GPT-4o prompt for generating subject line variants
4. Implement prediction model for open-rate scoring
5. Add functionality to insert selected subject line into the editor
6. Track subject line selection for analytics

Subject line generation function:
```typescript
// lib/subject-line-optimizer.ts
import { supabase } from '@/lib/supabase';

export async function generateSubjectLines(content: string, industry?: string): Promise<Array<{text: string, score: number}>> {
  try {
    const { data, error } = await supabase.functions.invoke('generate-subject-lines', {
      body: { content, industry }
    });
    
    if (error) throw error;
    return data;
  } catch (error) {
    console.error('Error generating subject lines:', error);
    return [];
  }
}

// components/SubjectLineModal.tsx
export function SubjectLineModal({ content, isOpen, onClose, onSelect }) {
  const [variants, setVariants] = useState<Array<{text: string, score: number}>>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    if (isOpen) {
      setIsLoading(true);
      generateSubjectLines(content)
        .then(results => {
          setVariants(results);
          setIsLoading(false);
        });
    }
  }, [isOpen, content]);
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Subject Line Optimizer</DialogTitle>
          <DialogDescription>
            Choose a subject line variant with the highest predicted open rate.
          </DialogDescription>
        </DialogHeader>
        
        {isLoading ? (
          <div className="flex justify-center py-8">
            <Spinner />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            {variants.map((variant, index) => (
              <SubjectLineCard
                key={index}
                text={variant.text}
                score={variant.score}
                onSelect={() => onSelect(variant.text)}
              />
            ))}
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
```

# Test Strategy:
1. Test subject line generation with various content types
2. Verify open-rate prediction model accuracy
3. Test modal UI responsiveness and accessibility
4. Verify insertion of selected subject line into editor
5. Test caching of generated subject lines
6. Measure generation time to ensure acceptable performance
