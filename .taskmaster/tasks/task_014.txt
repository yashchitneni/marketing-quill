# Task ID: 14
# Title: Analytics and Validation Implementation
# Status: pending
# Dependencies: 5, 6, 7, 8
# Priority: low
# Description: Implement analytics tracking for suggestion acceptance, export frequency, and SEO score improvements. Set up pilot testing infrastructure for 5-10 marketing managers.
# Details:
1. Create analytics tracking for suggestion acceptance rate
2. Implement export frequency tracking
3. Track SEO score improvements over time
4. Set up pilot testing user group
5. Create feedback collection mechanism
6. Implement analytics dashboard for internal use

Analytics implementation:
```typescript
// lib/analytics.ts
import { supabase } from '@/lib/supabase';

export enum EventType {
  SUGGESTION_SHOWN = 'suggestion_shown',
  SUGGESTION_ACCEPTED = 'suggestion_accepted',
  SUGGESTION_REJECTED = 'suggestion_rejected',
  EXPORT_MARKDOWN = 'export_markdown',
  EXPORT_HTML = 'export_html',
  SHARE_LINK_CREATED = 'share_link_created',
  SEO_SCORE_IMPROVED = 'seo_score_improved'
}

interface EventProperties {
  [key: string]: string | number | boolean;
}

export async function trackEvent(eventType: EventType, properties: EventProperties = {}): Promise<void> {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) return;
    
    await supabase.from('analytics_events').insert({
      user_id: user.id,
      event_type: eventType,
      properties,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Analytics error:', error);
  }
}

export async function calculateSuggestionAcceptanceRate(userId: string): Promise<number> {
  try {
    const { data: shown } = await supabase
      .from('analytics_events')
      .select('id', { count: 'exact' })
      .eq('user_id', userId)
      .eq('event_type', EventType.SUGGESTION_SHOWN);
      
    const { data: accepted } = await supabase
      .from('analytics_events')
      .select('id', { count: 'exact' })
      .eq('user_id', userId)
      .eq('event_type', EventType.SUGGESTION_ACCEPTED);
      
    if (!shown?.count || shown.count === 0) return 0;
    
    return (accepted?.count || 0) / shown.count;
  } catch (error) {
    console.error('Analytics calculation error:', error);
    return 0;
  }
}

export async function trackSEOScoreImprovement(draftId: string, oldScore: number, newScore: number): Promise<void> {
  if (newScore <= oldScore) return;
  
  await trackEvent(EventType.SEO_SCORE_IMPROVED, {
    draft_id: draftId,
    old_score: oldScore,
    new_score: newScore,
    improvement: newScore - oldScore
  });
}
```

Feedback collection implementation:
```typescript
// components/FeedbackWidget.tsx
import { useState } from 'react';
import { supabase } from '@/lib/supabase';

export function FeedbackWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [feedback, setFeedback] = useState('');
  const [rating, setRating] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  
  const handleSubmit = async () => {
    if (!feedback || rating === null) return;
    
    setIsSubmitting(true);
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      await supabase.from('feedback').insert({
        user_id: user?.id,
        feedback,
        rating,
        created_at: new Date().toISOString()
      });
      
      setIsSubmitted(true);
      setTimeout(() => {
        setIsOpen(false);
        setIsSubmitted(false);
        setFeedback('');
        setRating(null);
      }, 3000);
    } catch (error) {
      console.error('Feedback submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="fixed bottom-4 right-4 z-50">
      {!isOpen ? (
        <button
          className="bg-indigo-600 text-white rounded-full p-3 shadow-lg hover:bg-indigo-700 transition-colors"
          onClick={() => setIsOpen(true)}
          aria-label="Open feedback form"
        >
          <FeedbackIcon className="w-6 h-6" />
        </button>
      ) : (
        <div className="bg-white rounded-lg shadow-xl p-4 w-80">
          <div className="flex justify-between items-center mb-4">
            <h3 className="font-medium">Share your feedback</h3>
            <button 
              onClick={() => setIsOpen(false)}
              aria-label="Close feedback form"
            >
              <XIcon className="w-5 h-5" />
            </button>
          </div>
          
          {isSubmitted ? (
            <div className="text-center py-4">
              <CheckCircleIcon className="w-12 h-12 text-green-500 mx-auto mb-2" />
              <p>Thank you for your feedback!</p>
            </div>
          ) : (
            <>
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">How would you rate your experience?</label>
                <div className="flex justify-between">
                  {[1, 2, 3, 4, 5].map((value) => (
                    <button
                      key={value}
                      className={`w-10 h-10 rounded-full ${rating === value ? 'bg-indigo-600 text-white' : 'bg-gray-100'}`}
                      onClick={() => setRating(value)}
                    >
                      {value}
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Your feedback</label>
                <textarea
                  className="w-full border rounded-md p-2"
                  rows={3}
                  value={feedback}
                  onChange={(e) => setFeedback(e.target.value)}
                  placeholder="Tell us what you think..."
                />
              </div>
              
              <button
                className="w-full bg-indigo-600 text-white py-2 rounded-md hover:bg-indigo-700 transition-colors disabled:bg-gray-300"
                onClick={handleSubmit}
                disabled={!feedback || rating === null || isSubmitting}
              >
                {isSubmitting ? 'Submitting...' : 'Submit Feedback'}
              </button>
            </>
          )}
        </div>
      )}
    </div>
  );
}
```

# Test Strategy:
1. Verify analytics events are properly tracked
2. Test suggestion acceptance rate calculation
3. Verify SEO score improvement tracking
4. Test feedback collection mechanism
5. Verify pilot testing group access and permissions
6. Test analytics dashboard data accuracy
7. Verify data retention policies for analytics data
